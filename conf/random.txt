/*public Map<String,Integer> issueDetails(List<Issue> issues) {
    int totalIssue = 0;
    int lt24h = 0;
    int gt24lt7d = 0;
    int gt7d = 0;
    for(Issue issue:issues) {
      //filtering the pull request as the github api returns both the issue and pull request as issues
      if(issue.getPullRequest() == null) {
        totalIssue++;
        Date isoDate = issue.getCreatedAt();
        DateTime now = DateTime.now();

        DateTime isoDate1 = new DateTime(now, DateTimeZone.UTC);
        DateTimeFormatter dateTimeFormatter1 = DateTimeFormat
            .forPattern("MM/dd/yyyy HH:mm:ss")
            .withZone(DateTimeZone.forID("Asia/Kolkata"));
        String newUpdatedDate = dateTimeFormatter1.print(isoDate1);

        SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        Date d1 = null;
        Date d2 = null;
        try {
          d1 = isoDate;
          d2 = format.parse(newUpdatedDate);

          //in milliseconds
          long diff = d2.getTime() - d1.getTime();
          long diffDays = diff / (24 * 60 * 60 * 1000);

          if(diffDays == 0) {
            lt24h+=1;
          } else if(diffDays > 0 && diffDays<7) {
            gt24lt7d+=1;
          } else if(diffDays>7) {
            gt7d+=1;
          }

        } catch (Exception e) {
          e.printStackTrace();
        }
      }
    }

    Map<String,Integer> issueDetails = new HashMap<>();
    issueDetails.put("totalIssue",totalIssue);
    issueDetails.put("lessThan24Hours",lt24h);
    issueDetails.put("greaterThan24HoursLessThan7Days",gt24lt7d);
    issueDetails.put("greaterThan7Days",gt7d);
    return issueDetails;
  }*/